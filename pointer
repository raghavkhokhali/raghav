// this is to swap the number using pointer
#include<stdio.h>
 void Swap(int *a,int *b); // function prototype
    int main(){
        int x,y;
        printf("enter the value of x and y respectively");
        scanf("%d%d",&x,&y);
     Swap(&x,&y);     // function call
        printf("the value of the x and y is to be given as %d and %d",x,y);
   
        return 0;

}

void Swap(int *a,int *b){   // function definition
int temp;
temp=*a;
*a=*b;
*b=temp;
}



//this is to print the value and the address of the number.
#include<stdio.h>
 
    int main(){
    int a=5;
    int *ptr;
    ptr=&a;
    printf("the value of the letter is %u\n",a);
    printf("the value of the address of the %u \n",ptr);
    printf("the value of the a is %u \n",*ptr);
        return 0;
}

//Write a program having a variable i. Print the address of i. Pass this 
//variable to a function and print its address. Are these addresses same? Why?

/* the address of both did not came up same in the function definition and
in the main function because the value of the function call and the address of the asssgined
call by value is different in the memory.
*/

#include<stdio.h>
 void add(int a){
     printf("the address of the variable a is %u",&a);

 }
    int main() {
    int i=4;
    printf("the value of the i is %d",i);
add(i);
printf("the address of the number is %u",&i);
        return 0;
}

//Write a program to change the value of a 
//variable to ten times its current value.
// Write a function and pass the value by reference.
/*#include<stdio.h>
 int times(int a){

     return 10*a;
 }
    int main() {
    int a=2;
    printf("the value of the given vairable is %d",a);
    printf("the value of the numbe is %u",times(a));
        return 0;
}*/// this is call by value method

//this is for the call by reference
#include<stdio.h>
 int times(int *i){     // function definition
int a=*i*10;
return a;



 }
    int main() {
    int i=2;
    printf("the value that is given to us is i:%d",i);
    printf("the value of the i into tentimes is:%u", times(&i));
        return 0;
}
